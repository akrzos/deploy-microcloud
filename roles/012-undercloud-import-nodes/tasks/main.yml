---
#
# Imports and Configures Nodes
#

- name: Validate instackenv.json Block
  block:
    - name: Check for ipmitool
      yum:
        name: ipmitool
        state: present

    - name: Run validate-instackenv.py
      shell: |
        set -o pipefail
        cd /home/stack/
        { time python /home/stack/mccloud/validate-instackenv.py -i /home/stack/instackenv.json -o /home/stack/instackenv.valid.json -f {{log_dir}}/012-invalid-nodes.yaml -u {{inventory_hostname_short}} 2>&1 | tee -a {{log_dir}}/012-0-validate-instackenv.log ; } 2>> {{log_dir}}/012-0-validate-instackenv.log
  rescue:
    - name: Check if failed nodes tolerated
      fail:
        msg: "Failed nodes and node_failure_tolerance is false"
      when: not node_failure_tolerance

    - name: Count failed nodes (invalid instackenv nodes)
      shell: cat {{log_dir}}/012-invalid-nodes.yaml | wc -l
      register: failed_node_count

    - name: Accumlate node failures into total_node_failure_count
      set_fact:
        total_node_failure_count: "{{total_node_failure_count|int + failed_node_count.stdout|int}}"

    # If we tolerate node failures, then check if we failed too many
    - name: "Check failed node count (Failure Count: {{ total_node_failure_count|int}} > Tolerance: {{node_failure_tolerance_count}})"
      fail:
        msg: "Too many failed nodes - {{total_node_failure_count|int}}"
      when: total_node_failure_count|int > node_failure_tolerance_count
  always:
    - name: Collect validate-instackenv.py items
      shell: |
        cp /home/stack/instackenv.json {{log_dir}}/instackenv.json
        cp /home/stack/instackenv.valid.json {{log_dir}}/instackenv.valid0.json
      ignore_errors: true

    - name: Collect validate instackenv.json Artifacts
      synchronize:
        src: "{{log_dir}}"
        dest: "{{artifact_dir}}/mccloud-log"
        mode: pull
      when: collect_artifacts

- name: Import/Configure Nodes Block
  block:
    - name: Convert instackenv for no introspection requirement
      shell: |
        set -o pipefail
        cat /home/stack/instackenv.valid.json | jq  '{ nodes: [ .nodes[] | .cpu="4" | .memory="60000" | .disk="50" |  .  ]}' > /home/stack/intermediate.json
        python -m json.tool /home/stack/intermediate.json /home/stack/instackenv.valid.json
        rm -f /home/stack/intermediate.json
      when: instackenv_no_introspection

    - name: Import instackenv.json
      shell: |
        set -o pipefail
        . /home/stack/stackrc
        { time openstack overcloud node import /home/stack/instackenv.valid.json 2>&1 | tee -a {{log_dir}}/012-1-import-instackenv.log ; } 2>> {{log_dir}}/012-1-import-instackenv.log

    - name: Configure boot
      shell: |
        set -o pipefail
        . /home/stack/stackrc
        { time openstack overcloud node configure --all-manageable 2>&1 | tee -a {{log_dir}}/012-2-configure-boot.log ; } 2>> {{log_dir}}/012-2-configure-boot.log
      when: version >= 13
  rescue:
    # Collect additional items to sweep into mccloud-log for debugging
    - name: Collect OpenStack Ironic log files
      become: true
      shell: |
        mkdir -p {{log_dir}}/ironic
        cp -r /var/log/ironic/* {{log_dir}}/ironic

    - name: Dump baremetal node list
      shell:  |
        set -o pipefail
        . /home/stack/stackrc
        openstack baremetal node list 2>&1 | tee -a {{log_dir}}/012-0-node-list.log
        openstack baremetal node list | grep None | awk '{print $2}' | xargs -I % openstack baremetal node show % 2>&1 | tee -a {{log_dir}}/012-0-node-show.log

    # None "typical" failure here so fail playbook out (no node failure tolerance)
    - name: Ensure playbook stops under this condition
      fail:
        msg: "Node Import/Provide failures."
  always:
    - name: Collect Import/Configure Nodes Artifacts
      synchronize:
        src: "{{log_dir}}"
        dest: "{{artifact_dir}}/mccloud-log"
        mode: pull
      when: collect_artifacts

- name: No Introspection node provide Block
  when: not introspection_enabled
  block:
    - name: Set Nodes to provide
      shell: |
        set -o pipefail
        . /home/stack/stackrc
        { time timeout {{node_provide_timeout}} openstack overcloud node provide --all-manageable 2>&1 | tee -a {{log_dir}}/012-3-overcloud-node-provide.log ; } 2>> {{log_dir}}/012-3-overcloud-node-provide.log

    - name: Check for stuck/failed nodes in clean failed/clean wait
      shell: |
        . /home/stack/stackrc
        openstack baremetal node list | egrep "clean failed|clean wait" -i -c
      register: nodes_stuck
      failed_when: nodes_stuck.rc == 0
  rescue:
    # Collect additional items to sweep into mccloud-log for debugging failure
    - name: Collect OpenStack Ironic log files
      become: true
      shell: |
        mkdir -p {{log_dir}}/ironic
        cp -r /var/log/ironic/* {{log_dir}}/ironic

    - name: Dump baremetal node list
      shell:  |
        set -o pipefail
        . /home/stack/stackrc
        openstack baremetal node list 2>&1 | tee -a {{log_dir}}/012-1-node-list.log
        openstack baremetal node list | grep None | awk '{print $2}' | xargs -I % openstack baremetal node show % 2>&1 | tee -a {{log_dir}}/012-1-node-show.log

    - name: Check if failed nodes tolerated
      fail:
        msg: "Failed nodes and node_failure_tolerance is false"
      when: not node_failure_tolerance

    - name: Count failed nodes (nodes stuck in clean failed/wait after timeout)
      shell: |
        . /home/stack/stackrc
        openstack baremetal node list | egrep "clean failed|clean wait" -i -c
      ignore_errors: true
      register: failed_node_count

    - name: Accumlate node failures into total_node_failure_count
      set_fact:
        total_node_failure_count: "{{total_node_failure_count|int + failed_node_count.stdout|int}}"

    # If we tolerate node failures, then check if we failed too many
    - name: "Check failed node count (Failure Count: {{ total_node_failure_count|int}} > Tolerance: {{node_failure_tolerance_count}})"
      fail:
        msg: "Too many failed nodes - {{total_node_failure_count|int}}"
      when: total_node_failure_count|int > node_failure_tolerance_count

    # If node_failure_tolerance_count cleared, we need to remove the "failed nodes" from instackenv.valid.json and OpenStack Ironic
    - name: Remove failed no introspection node provide nodes
      shell: |
        set -o pipefail
        . /home/stack/stackrc
        openstack baremetal node list | egrep "clean failed|clean wait" -i | awk '{print $2}' | xargs -I % openstack baremetal node show -c uuid -c driver_info % > {{log_dir}}/012-0-nodes-to-delete.log
        for node_ipmi in `openstack baremetal node list | egrep "clean failed|clean wait" -i | awk '{print $2}' | xargs -I % openstack baremetal node show -c driver_info -f yaml % | grep "ipmi_address" | awk '{print $2}'`
        do
          cat /home/stack/instackenv.valid.json | jq  "{ nodes: [ .nodes[] | select(.pm_addr==\"${node_ipmi}\" | not) | .cpu=\"4\" | .memory=\"60000\" | .disk=\"50\" |  .  ]}" > /home/stack/intermediate.json
          python -m json.tool /home/stack/intermediate.json /home/stack/instackenv.valid.json
          rm -f /home/stack/intermediate.json
        done
        openstack baremetal node list | egrep "clean wait" -i | awk '{print $2}' | xargs -I % openstack baremetal node abort % 2>&1 | tee -a {{log_dir}}/012-0-node-abort.log
        openstack baremetal node list | egrep "clean failed" -i | awk '{print $2}' | xargs -I % openstack baremetal node maintenance set % 2>&1 | tee -a {{log_dir}}/012-0-node-maintenance-set.log
        openstack baremetal node list | egrep "clean failed" -i | awk '{print $2}' | xargs -I % openstack baremetal node delete % 2>&1 | tee -a {{log_dir}}/012-0-node-delete-clean-failed.log
  always:
    - name: Recollect instackenv.valid.json
      shell: |
        cp /home/stack/instackenv.valid.json {{log_dir}}/instackenv.valid1.nodeprovide.json
      ignore_errors: true

    - name: Collect No Introspection node provide Artifacts
      synchronize:
        src: "{{log_dir}}"
        dest: "{{artifact_dir}}/mccloud-log"
        mode: pull
      when: collect_artifacts
